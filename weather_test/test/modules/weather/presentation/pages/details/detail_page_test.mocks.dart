// Mocks generated by Mockito 5.4.4 from annotations
// in weather_test/test/modules/weather/presentation/pages/details/detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:weather_test/modules/core/adapters/cache_adapter/cache_hive/cache_hive.dart'
    as _i6;
import 'package:weather_test/modules/core/adapters/cache_adapter/models/cache_model.dart'
    as _i8;
import 'package:weather_test/modules/weather/domain/entities/location_entity.dart'
    as _i4;
import 'package:weather_test/modules/weather/presentation/stores/location_store.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoctionStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoctionStore extends _i1.Mock implements _i2.LoctionStore {
  MockLoctionStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get filter => (super.noSuchMethod(
        Invocation.getter(#filter),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#filter),
        ),
      ) as String);

  @override
  set filter(String? value) => super.noSuchMethod(
        Invocation.setter(
          #filter,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.LocationEntity> get location => (super.noSuchMethod(
        Invocation.getter(#location),
        returnValue: <_i4.LocationEntity>[],
      ) as List<_i4.LocationEntity>);

  @override
  List<_i4.LocationEntity> get locationFilteres => (super.noSuchMethod(
        Invocation.getter(#locationFilteres),
        returnValue: <_i4.LocationEntity>[],
      ) as List<_i4.LocationEntity>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addLocation(_i4.LocationEntity? value) => super.noSuchMethod(
        Invocation.method(
          #addLocation,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CacheHive].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheHive extends _i1.Mock implements _i6.CacheHive {
  MockCacheHive() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> put(_i8.CacheModel? data) => (super.noSuchMethod(
        Invocation.method(
          #put,
          [data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i8.CacheModel?> get(String? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i7.Future<_i8.CacheModel?>.value(),
      ) as _i7.Future<_i8.CacheModel?>);
}
